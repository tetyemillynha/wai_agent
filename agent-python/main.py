import asyncio
from agents import (
    Agent,
    Runner,
    GuardrailFunctionOutput,
    InputGuardrail,
    input_guardrail,
    OutputGuardrail,
    output_guardrail,
    RunContextWrapper,
    TResponseInputItem,
    InputGuardrailTripwireTriggered,
    OutputGuardrailTripwireTriggered
)
from utils import load_env_variables, load_json_content

async def create_agent_guardrail(name: str, instructions: str) -> Agent:
    return Agent(
        name=name,
        instructions=instructions,
        model="gpt-4o-mini",
    )

@input_guardrail
async def check_input_guardrail(
    ctx: RunContextWrapper[None],
    _: Agent,
    input: str | list[TResponseInputItem]
) -> GuardrailFunctionOutput:
    guardrail_agent = await create_agent_guardrail(
        name="Input Guardrail Agent",
        instructions=(
            f"""
                Voc√™ √© um verificador de escopo.
                Responda apenas PASS ou FAIL.

                1. Fala sobre consumo de cr√©ditos, reservas ou pacotes de espa√ßos flex√≠veis da empresa?  
                2. Est√° em portugu√™s e cont√©m um pedido claro?  
                3. N√£o pede dados pessoais sens√≠veis nem informa√ß√µes fora do escopo?

                Se TODAS as respostas forem "sim", responda apenas com PASS.  
                Caso contr√°rio, responda apenas com FAIL e N√ÉO acrescente nada al√©m dessa palavra.
            """
        )
    )
    result = await Runner.run(guardrail_agent, input, context=ctx.context)
    return GuardrailFunctionOutput(
        output_info=result.final_output,
        tripwire_triggered=result.final_output.strip() == "FAIL"
    )

@output_guardrail
async def check_output_guardrail(
    ctx: RunContextWrapper[None],
    _: Agent,
    response_agent: str
) -> GuardrailFunctionOutput:
    guardrail_agent = await create_agent_guardrail(
        name="Output Guardrail Agent",
        instructions=(
            f"""
                Voc√™ √© um auditor de formato de sa√≠da.
                Responda apenas PASS ou FAIL.

                Crit√©rios (todos obrigat√≥rios):

                ‚úì A resposta √© em portugu√™s.  
                ‚úì Cont√©m de 3 a 5 bullet points iniciados por "- " (travess√£o + espa√ßo).  
                ‚úì Cada bullet √© curto, direto e usa linguagem acess√≠vel a gestores.  
                ‚úì N√£o h√° jarg√µes t√©cnicos, links, cabe√ßalhos ou emojis.  
                ‚úì N√£o menciona "dados insuficientes" **a menos** que a resposta inteira seja exatamente:
                "Desculpe! N√£o encontramos dados suficientes para responder √† sua pergunta neste momento."

                Se TODOS os crit√©rios forem atendidos, devolva apenas PASS.  
                Caso qualquer crit√©rio falhe, devolva apenas FAIL.
            """
        )
    )
    result = await Runner.run(guardrail_agent, response_agent, context=ctx.context)
    return GuardrailFunctionOutput(
        output_info=result.final_output,
        tripwire_triggered=result.final_output.strip() == "FAIL"
    )

async def create_agent_analyst(markdown_data: str) -> Agent:
    return Agent(
        name="Booking Report Analyst",
        instructions=(
            f"""
                Voc√™ √© um analista de dados especializado em consumo de espa√ßos flex√≠veis e reservas empresariais.

                Contexto:
                - Dados da empresa (JSON): {markdown_data}

                Instru√ß√µes:
                1. Baseie-se exclusivamente nos dados acima ‚Äî n√£o invente nada.
                2. Gere de 3 a 5 insights em bullet points:
                - Seja direto e claro.
                - Destaque padr√µes, aumentos ou quedas relevantes.
                - Evite jarg√µes t√©cnicos; linguagem acess√≠vel a gestores.
                - Indique limita√ß√µes de forma sutil, sem pedir mais dados.
                3. Se os dados forem insuficientes: retorne exatamente
                "Desculpe! N√£o encontramos dados suficientes para responder √† sua pergunta neste momento."
                4. Se o usu√°rio apenas agradecer, responda de forma amig√°vel e n√£o forne√ßa insights.
                5. N√£o adicione cabe√ßalhos, emojis ou assinaturas ‚Äî apenas os bullets (ou a mensagem de desculpas).
            """
        ),
        model="litellm/anthropic/claude-3-5-sonnet-20240620",
        input_guardrails=[check_input_guardrail],
        output_guardrails=[check_output_guardrail]
    )

async def create_agent_judge(markdown_data: str) -> Agent:
    return Agent(
        name="Agent Judge",
        instructions=(
            f"""
                Voc√™ √© um avaliador rigoroso.  Julgue a resposta do assistente com base **apenas** nos
                dados do JSON fornecido.  Atribua notas de 0 a 10 para cada crit√©rio abaixo
                (exatid√£o, relev√¢ncia, clareza_formato, insight).

                Retorne **somente** o JSON no formato:

                {{
                    "scores": {{
                        "exatid√£o": <0-10>,
                        "relev√¢ncia": <0-10>,
                        "clareza_formato": <0-10>,
                        "insight": <0-10>
                    }},
                    "nota_geral": <0-100>,      # aplique os pesos definidos no c√≥digo
                    "critica": "breve justificativa em portugu√™s (1 par√°grafo)"
                }}

                Regras adicionais:
                - Se a resposta inventar informa√ß√µes, defina exatid√£o = 0.
                - Se faltar qualquer crit√©rio, defina a nota desse crit√©rio = 0.
                - Nunca inclua explica√ß√µes fora do JSON.

                Dados do relat√≥rio:
                {markdown_data}
            """
        ),
        model="o3"
    )

async def handle_question(agent: Agent, question: str):
    result = await Runner.run(agent, question)
    return result.final_output

def start_terminal_chat(agent: Agent, judge: Agent = None):
    print("üí¨ Chat inicializado com o Agente Facilities (digite 'exit' para sair)\n")

    async def chat_loop():
        while True:
            user_input = input("Usu√°rio: ")
            if user_input.lower() in {"exit", "quit"}:
                print("üëã Saindo do chat.")
                break

            try:
                response = await handle_question(agent, user_input)
                print(f"Agente Facilities: {response}\n")
                
                if judge:
                    prompt_judge = f"""
                        QUESTION:
                        {user_input}

                        ANSWER:
                        {response}
                    """
                    judge_response = await handle_question(judge, prompt_judge)
                    print(f"Agente Judge: {judge_response}\n")

            except InputGuardrailTripwireTriggered:
                print("‚ùå Desculpe, sua pergunta est√° fora do escopo do assistente. Por favor, fa√ßa uma pergunta relacionada a:")
                print("- Consumo de cr√©ditos")
                print("- Reservas empresariais")
                print("- Uso de espa√ßos flex√≠veis")
                print("- Tend√™ncias por grupo, cidade ou usu√°rio")
                print("- Comparativos entre per√≠odos")
                print("- Informa√ß√µes baseadas em relat√≥rios de uso")
                print()
            except OutputGuardrailTripwireTriggered:
                print("Desculpe! Algo deu errado ao gerar a resposta.")

    asyncio.run(chat_loop())

def main():
    load_env_variables()
    # markdown = load_markdown_content("./assets/relatorio-empresa-1810-fev-mar-abr.md")
    json_data = load_json_content("./assets/relatorio-empresa-1810.json")
    # markdown = load_markdown_content("./assets/relatorio-empresa-1010.md")
    agent = asyncio.run(create_agent_analyst(json_data))
    judge = asyncio.run(create_agent_judge(json_data))
    start_terminal_chat(agent, judge)


if __name__ == "__main__":
    main()