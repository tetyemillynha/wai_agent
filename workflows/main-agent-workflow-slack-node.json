{
  "name": "WAi Assistant",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "=https://woba-backend.staging.woba.com.br/auth/login",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "password",
              "value": "@WBste342"
            },
            {
              "name": "email",
              "value": "stefhany.oliveira@woba.com.br"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -220,
        1120
      ],
      "id": "8616318f-a2ba-49b6-b583-8ed447e021f1",
      "name": "Get Token"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.blocks[0].elements[0].elements[1].text }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Hoje é {{ $now }}.\n\nVocê é um assistente de dados responsável por analisar perguntas de usuários relacionadas ao consumo de créditos e reservas de espaços de trabalho flexíveis (coworkings) de empresas na plataforma.\n\nSeu objetivo é validar se a pergunta está dentro do **contexto** esperado e **extrair as informações necessárias**. Sempre retorne os dados nesse formato:\n\ncompanyId: [id extraído]\nstartDate: [data inicial no formato YYYY-MM-DD]\nendDate: [data final no formato YYYY-MM-DD]\nerrorMessage: [null ou mensagem explicativa]\n\n**Instruções de interpretação:**\n\n1. **Período**:\n   - Aceite datas absolutas (ex: “de 01/01/2024 a 31/03/2024”)\n   - Aceite datas relativas (ex: “últimas 3 semanas”, “últimos 2 meses”, “este mês”)\n   - Converta sempre para startDate e endDate no formato ISO (YYYY-MM-DD), usando hoje como base: {{ $now }}\n\n2. **ID da empresa / liga**:\n   - Identifique qualquer número que se refira claramente a uma empresa ou liga\n   - Pode aparecer como “empresa 189”, “liga 554” ou “id 102”\n\n---\n\n**Contexto aceito**:\n- Perguntas sobre consumo de créditos\n- Volume de reservas\n- Distribuição de uso por espaço, cidade, usuário, grupo\n- Ranking de consumo de créditos e/ou produtos\n- Comparativos de meses\n- Qualquer pergunta que esteja relacionada com bookings e reservas de coworkings para trabalho flexivel\n\n---\n\n\n**Responda com:**\nSe a pergunta estiver fora do contexto, responda com:\n\ncompanyId: null,\nstartDate: null,\nendDate\": null,\nvalidatedQuestion: \"aqui retorna a primeira pergunta válida do usuário\"\nerrorMessage: \"Desculpe, só consigo responder perguntas sobre consumo de créditos e reservas.\"\n\nSe a pergunta estiver dentro do contexto, mas sem o ID da empresa ou período, responda sempre com:\n\ncompanyId: null,\nstartDate: null,\nendDate: null,\nvalidatedQuestion: \"**aqui retorna a primeira pergunta válida do usuário**\",\nerrorMessage: \"Por favor, forneça o ID da empresa e o período desejado.\"\n\nSe estiver tudo certo, responda com:\ncompanyId: 123,\nstartDate: \"2024-01-01\",\nendDate: \"2024-03-31\",\nvalidatedQuestion: \"**aqui retorna a primeira pergunta válida do usuário**\",\nerrorMessage: null\n\nHumano:\n{{ $json.blocks[0].elements[0].elements[1].text }}"
        }
      },
      "id": "1bcea020-9445-4d81-a5a1-8f24f9cb3730",
      "name": "Agente de Intenção",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -1320,
        1140
      ],
      "alwaysOutputData": true,
      "executeOnce": false,
      "retryOnFail": false,
      "notesInFlow": false
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Slack Trigger1').item.json.user }}",
        "contextWindowLength": 3
      },
      "id": "20f2a095-93bd-4649-ae7e-6e8d62501d94",
      "name": "Simple Memory1",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1260,
        1400
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('If1').item.json.validatedQuestion }}",
        "options": {
          "systemMessage": "=Assuma que você é um assistente de dados que responde perguntas com base no relatório abaixo. Seja objetivo, use dados numéricos quando possível, e responda sempre em português. Se necessário forneça alguma informação relevante de alerta ou ofertas.\n{{ $('Code1').item.json.markdown }}\n"
        }
      },
      "id": "068e5ef8-fb8a-469d-865f-fcebad72d279",
      "name": "Analista de Dados2",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1140,
        1140
      ],
      "alwaysOutputData": true,
      "executeOnce": false,
      "retryOnFail": false,
      "notesInFlow": false
    },
    {
      "parameters": {
        "model": {
          "value": "gpt-4o",
          "mode": "list"
        },
        "options": {}
      },
      "id": "e1da6d7b-2589-4f5b-8e0d-07296e717f09",
      "name": "OpenAI Chat Model2",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1100,
        1400
      ],
      "credentials": {
        "openAiApi": {
          "id": "UFd2WIrurvCwSOE0",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "={{ $('Slack Trigger1').item.json.channel }}",
          "mode": "id"
        },
        "text": "={{ $json.output }}",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        1520,
        1140
      ],
      "id": "f5c07fe2-de06-4bb9-bb80-e18e1d023d13",
      "name": "Slack3",
      "webhookId": "f76a0e17-643e-4399-8cee-0f0be5fa21af",
      "credentials": {
        "slackOAuth2Api": {
          "id": "diJj3DsJ6mfYnxja",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "trigger": [
          "app_mention",
          "any_event"
        ],
        "watchWorkspace": true,
        "options": {}
      },
      "type": "n8n-nodes-base.slackTrigger",
      "typeVersion": 1,
      "position": [
        -1520,
        1140
      ],
      "id": "e8da30bb-b2d8-446b-944b-3c08a51578ec",
      "name": "Slack Trigger1",
      "webhookId": "3febc220-7207-45e4-b21c-5a9cb3526280",
      "credentials": {
        "slackApi": {
          "id": "GhUVE8zWnVkhUdSG",
          "name": "Slack account 2"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api-gateway.staging.woba.com.br/api/bookings?start_date={{ $('If1').item.json.startDate }}&end_date={{ $('If1').item.json.endDate }}&allowFuture=true&status[]=0&status[]=1&status[]=2&status[]=3&status[]=4&status[]=5&appType=3&companies%5B%5D={{ $('If1').item.json.companyId }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "auth-token",
              "value": "={{ $json.token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        80,
        940
      ],
      "id": "96d9e143-ea9c-41c2-b145-a35455691da3",
      "name": "Request Bookings1"
    },
    {
      "parameters": {
        "jsCode": "const bookings = $input.first().json.bookings;\n\nconst groups = $input.first().json._embedded?.company_groups || [];\n\nconst pacotes = $input.first().json.packages || [];\n\nconsole.log($input.first().json._embedded)\n\nconsole.log(groups);\n\n\nif (!bookings || bookings.length === 0) {\n  return [{ json: { markdown: '# ❌ Nenhuma reserva encontrada.' } }];\n}\n\n// Mapas auxiliares\nconst porCidade = {};\nconst porEspaco = {};\nconst porGrupo = {};\nconst porUsuario = {};\nlet totalCreditos = 0;\nlet totalGasto = 0;\n\n// Map de ID de grupo → nome\nconst mapGrupos = {};\ngroups.forEach(g => {\n  const ginfo = g.company_group;\n  mapGrupos[ginfo.id] = {\n    name: ginfo.name || 'Grupo sem nome',\n    total_members: g.total_members || 0\n  };\n});\n\n// Processar bookings\nbookings.forEach(booking => {\n  const cidade = booking.spaces?.cityname || 'Desconhecida';\n  const espaco = booking.spaces?.name || 'Espaço desconhecido';\n  const user = booking.users;\n  const grupoId = booking.group_id;\n  const grupo = mapGrupos[grupoId];\n\n  totalCreditos += booking.credits || 0;\n  totalGasto += booking.spentAmmount || 0;\n\n  // Cidades\n  porCidade[cidade] = (porCidade[cidade] || 0) + 1;\n\n  // Espaços\n  porEspaco[espaco] = porEspaco[espaco] || {\n    count: 0,\n    cm: booking.spaces?.cm_name,\n    bairro: booking.spaces?.neighborhood,\n    cidade\n  };\n  porEspaco[espaco].count++;\n\n  // Grupos\n  if (grupo) {\n    porGrupo[grupo.name] = porGrupo[grupo.name] || { count: 0, members: grupo.total_members };\n    porGrupo[grupo.name].count++;\n  }\n\n  // Usuários\n  if (user?.first_name) {\n    const nomeCompleto = `${user.first_name} ${user.last_name || ''}`.trim();\n    porUsuario[nomeCompleto] = porUsuario[nomeCompleto] || {\n      email: user.email || '',\n      totalCreditos: 0\n    };\n    porUsuario[nomeCompleto].totalCreditos += booking.credits || 0;\n  }\n});\n\n// Top 5 usuários\nconst topUsuarios = Object.entries(porUsuario)\n  .sort((a, b) => b[1].totalCreditos - a[1].totalCreditos)\n  .slice(0, 5);\n\n// Montagem do markdown\nlet markdown = `# 📊 Relatório Analítico - Empresa ${bookings[0].companies?.id} -  ${bookings[0].companies?.name || 'Empresa Desconhecida'}\\n\\n`;\n\nmarkdown += `## 🗓️ Período: ${bookings[0].booking_date?.split('T')[0] || 'Indefinido'} até ${bookings.at(-1).booking_date?.split('T')[0] || 'Indefinido'}\\n\\n`;\n\nmarkdown += `### 🔢 Resumo Geral\\n`;\nmarkdown += `- Total de reservas: ${bookings.length}\\n`;\nmarkdown += `- Créditos consumidos: ${totalCreditos}\\n`;\nmarkdown += `- Valor gasto estimado: R$ ${(totalGasto / 100).toFixed(2)}\\n`;\nmarkdown += `- Cidades atendidas: ${Object.keys(porCidade).length}\\n`;\nmarkdown += `- Grupos identificados: ${Object.keys(porGrupo).length}\\n\\n`;\n\nmarkdown += `---\\n## 🏙️ Reservas por Cidade:\\n`;\nfor (const [cidade, total] of Object.entries(porCidade)) {\n  markdown += `- **${cidade}**: ${total} reservas\\n`;\n}\n\nmarkdown += `\\n## 🧑‍🤝‍🧑 Reservas por Grupo:\\n`;\nfor (const [grupo, data] of Object.entries(porGrupo)) {\n  markdown += `- **${grupo}**: ${data.count} reservas (${data.members} membros)\\n`;\n}\n\nmarkdown += `\\n## 👥 Top 5 Usuários por Créditos Consumidos:\\n`;\ntopUsuarios.forEach(([nome, data], i) => {\n  markdown += `${i + 1}. **${nome}** (${data.email}) – ${data.totalCreditos} créditos\\n`;\n});\n\nmarkdown += `\\n## 🏢 Espaços Utilizados:\\n`;\nfor (const [espaco, data] of Object.entries(porEspaco)) {\n  markdown += `- **${espaco}** (${data.cidade}, ${data.bairro}) – ${data.count} reservas`;\n  if (data.cm) markdown += ` — CM: ${data.cm}`;\n  markdown += '\\n';\n}\n\nmarkdown += `\\n---\\n## 📝 Detalhamento das Reservas:\\n`;\nbookings.forEach((b, i) => {\n  const nomeUsuario = b.users?.first_name ? `${b.users.first_name} ${b.users.last_name || ''}` : 'Usuário desconhecido';\n  const grupoNome = mapGrupos[b.group_id]?.name || 'Sem grupo';\n  const espaco = b.spaces?.name || 'Espaço não identificado';\n  const cidade = b.spaces?.cityname || 'Cidade não informada';\n  const data = b.booking_date?.split('T')[0] || 'Data não informada';\n  const horario = b.booking_detail || '';\n  const tipo = b.meetingRooms ? 'Reunião' : b.privateRooms ? 'Exclusivo' : 'Outro';\n  const checkin = b.checkIn ? '✅' : '❌';\n\n  markdown += `### Reserva #${b.id}\\n`;\n  markdown += `- Data: ${data} ${horario}\\n`;\n  markdown += `- Espaço: ${espaco} (${cidade})\\n`;\n  markdown += `- Tipo: ${tipo}\\n`;\n  markdown += `- Usuário: ${nomeUsuario} (${b.users?.email || 'sem email'})\\n`;\n  markdown += `- Grupo: ${grupoNome}\\n`;\n  markdown += `- Créditos: ${b.credits || 0}\\n`;\n  markdown += `- Gasto estimado: R$ ${(b.spentAmmount / 100).toFixed(2)}\\n`;\n  markdown += `- Check-in: ${checkin}\\n\\n`;\n});\n\nmarkdown += `## 🎯 Informações do Pacote Contratado\\n\\n`;\n\nfor (const pacote of pacotes) {\n  const ciclo = pacote.activeCycle || {};\n  const produtos = pacote.products?.join(', ') || '-';\n  const bloqueados = pacote.blockedProducts?.length ? pacote.blockedProducts.join(', ') : '_nenhum_';\n  const consumido = ciclo.creditAmountConsumed || 0;\n  const total = ciclo.creditAmountTotal || 0;\n  const disponivel = ciclo.availableCredits || 0;\n  const excedentes = ciclo.exceededCredits || 0;\n\n  markdown += `### Pacote #${pacote.id} (${pacote.duration})\\n`;\n  markdown += `- Vigência: ${new Date(pacote.startDate).toLocaleDateString('pt-BR')} até ${new Date(pacote.endDate).toLocaleDateString('pt-BR')}\\n`;\n  markdown += `- Produtos disponíveis: **${produtos}**\\n`;\n  markdown += `- Produtos bloqueados: **${bloqueados}**\\n`;\n  if (total > 0) {\n    markdown += `- Créditos totais: ${total}\\n`;\n    markdown += `- Créditos consumidos: ${consumido}\\n`;\n    markdown += `- Créditos disponíveis: ${disponivel}\\n`;\n    markdown += `- Preço unitário: R$ ${(ciclo.creditUnitPrice || 0).toFixed(2)}\\n`;\n    markdown += `- Preço de crédito excedente: R$ ${(ciclo.creditExceededPrice || 0).toFixed(2)}\\n`;\n    markdown += `- Porcentagem consumida: ${(ciclo.consumeInPercentage || 0).toFixed(2)}%\\n\\n`;\n  } else {\n    markdown += `- Créditos excedentes utilizados: ${excedentes}\\n`;\n    markdown += `- Preço de crédito excedente: R$ ${(ciclo.creditExceededPrice || 0).toFixed(2)}\\n`;\n    markdown += `- Créditos disponíveis: ${disponivel}\\n\\n`;\n  }\n}\n\nmarkdown += `---\\n_Gerado automaticamente por WAi Facilities em ${new Date().toLocaleString('pt-BR')}_`;\n\n\n\nreturn [{ json: { markdown } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        600,
        1140
      ],
      "id": "1f59e28b-7ff0-443e-b031-8e9e29cd02ba",
      "name": "Code1"
    },
    {
      "parameters": {
        "url": "=https://api-gateway.staging.woba.com.br/api/v0/companies/{{ $('If1').item.json.output.companyId }}/groups?fl=stats-members&limit=2000",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "auth-token",
              "value": "={{ $json.token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        80,
        1140
      ],
      "id": "84c17dcf-7d11-4493-bbae-355569bbfbaa",
      "name": "Request Groups1"
    },
    {
      "parameters": {
        "url": "=https://api-gateway.staging.woba.com.br/companies/{{ $('If1').item.json.companyId }}/packages/consumption",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "={{ $json.token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        80,
        1340
      ],
      "id": "02113dec-505f-4715-9f1f-7d641e743493",
      "name": "Request Packages1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "numberInputs": 3,
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        420,
        1140
      ],
      "id": "c1b9343f-095d-4a2e-b7c4-f4b9c1221dd0",
      "name": "Merge"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1320,
        1360
      ],
      "id": "fadf18a3-2b03-4b5f-bd4a-85e0335c7da8",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "UFd2WIrurvCwSOE0",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "195f66f0-840d-42e0-b8c3-44e1661de4f6",
              "leftValue": "={{ $json.companyId }}",
              "rightValue": "null",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "19bf20e8-603b-4582-a890-6db029f9e65c",
              "leftValue": "={{ $json.startDate }}",
              "rightValue": "null",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "cb5b0c4c-dfbe-49b1-a23a-976c674d365a",
              "leftValue": "={{ $json.endDate }}",
              "rightValue": "null",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -520,
        1140
      ],
      "id": "cf302591-b0b7-4633-9fc8-5d0cbe44d902",
      "name": "If1"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "={{ $('Slack Trigger1').item.json.channel }}",
          "mode": "id"
        },
        "text": "={{ $json.errorMessage }}",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        -220,
        1380
      ],
      "id": "876637cb-40d3-4830-b089-e0c7dfe09bfb",
      "name": "Slack4",
      "webhookId": "f76a0e17-643e-4399-8cee-0f0be5fa21af",
      "credentials": {
        "slackOAuth2Api": {
          "id": "diJj3DsJ6mfYnxja",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "={{ $('Slack Trigger1').item.json.channel }}",
          "mode": "id"
        },
        "text": "=Aguarde enquanto estou analisando as informações...",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        840,
        1140
      ],
      "id": "d6cc6441-a816-4b01-94e5-d86965812df8",
      "name": "Slack5",
      "webhookId": "f76a0e17-643e-4399-8cee-0f0be5fa21af",
      "credentials": {
        "slackApi": {
          "id": "GhUVE8zWnVkhUdSG",
          "name": "Slack account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const output = $input.first().json.output || '';\n\nconst linhas = output\n  .trim()\n  .split('\\n')\n  .map(l => l.trim())\n  .filter(Boolean);\n\n// Trata cada linha e remove vírgula do final\nconst entries = linhas.map(linha => {\n  const [chaveRaw, valorRaw] = linha.split(':');\n  const chave = chaveRaw.trim();\n  let valor = valorRaw.trim().replace(/,$/, ''); // remove vírgula no final\n\n  // Converte null, number ou mantém string\n  if (valor === 'null') {\n    valor = null;\n  } else if (/^\\d+$/.test(valor)) {\n    valor = Number(valor);\n  } else {\n    valor = valor.replace(/^\"|\"$/g, ''); // remove aspas se houver\n  }\n\n  return [chave, valor];\n});\n\n// Monta o objeto final\nconst resultado = {};\nentries.forEach(([chave, valor]) => {\n  resultado[chave] = valor;\n});\n\nreturn [{ json: resultado }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -960,
        1140
      ],
      "id": "23dfd998-3022-4db1-9690-570bea86ddea",
      "name": "Code"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Slack Trigger1').item.json.user }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -1160,
        1360
      ],
      "id": "7c835e9d-b774-482a-99ea-b1889d9f8a53",
      "name": "Memória da Intenção"
    }
  ],
  "pinData": {},
  "connections": {
    "Get Token": {
      "main": [
        [
          {
            "node": "Request Bookings1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Request Groups1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Request Packages1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agente de Intenção": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "Analista de Dados2",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Analista de Dados2": {
      "main": [
        [
          {
            "node": "Slack3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Analista de Dados2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Slack Trigger1": {
      "main": [
        [
          {
            "node": "Agente de Intenção",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Request Bookings1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Slack5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Request Groups1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Request Packages1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Agente de Intenção",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Get Token",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Slack4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack5": {
      "main": [
        [
          {
            "node": "Analista de Dados2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Memória da Intenção": {
      "ai_memory": [
        [
          {
            "node": "Agente de Intenção",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "5a2fdcdb-4e42-40af-830d-08aa21f58b95",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b1dd7d5a248f52852a54c187dc8b5f2508350d00b2bf8019f80ca5f0a6737f0c"
  },
  "id": "Gv9U5HBnpFjM3sSZ",
  "tags": []
}