{
  "name": "WAi Assistant",
  "nodes": [
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Slack Trigger').item.json.user }}",
        "contextWindowLength": 3
      },
      "id": "f2a5dd5e-29a1-4dbe-b640-c15b12661862",
      "name": "Simple Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        920,
        380
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Slack Trigger').item.json.blocks[0].elements[0].elements[1].text }}",
        "options": {
          "systemMessage": "=Assuma que voc√™ √© um assistente de dados que responde perguntas com base no relat√≥rio abaixo. Seja objetivo, use dados num√©ricos quando poss√≠vel, e responda sempre em portugu√™s. Se necess√°rio forne√ßa alguma informa√ß√£o relevante de alerta ou ofertas.\nTamb√©m retorne o relat√≥rio formatado no idioma pt-br com formata√ß√£o de datas e hor√°rios , informando as datas consultadas, nome e id da empresa.\n\n{{ $('Code').item.json.markdown }}"
        }
      },
      "id": "d5207c64-3e26-4185-a2ab-6091629c6b06",
      "name": "Analista de Dados",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        800,
        180
      ],
      "alwaysOutputData": true,
      "executeOnce": false,
      "retryOnFail": false,
      "notesInFlow": false
    },
    {
      "parameters": {
        "model": {
          "value": "gpt-4o",
          "mode": "list"
        },
        "options": {}
      },
      "id": "57028f1d-971e-4b40-a473-341c94cd2427",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        780,
        380
      ],
      "credentials": {
        "openAiApi": {
          "id": "UFd2WIrurvCwSOE0",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C08KLKYEPL3",
          "mode": "list",
          "cachedResultName": "toda-a-empresa-novo-workspace"
        },
        "text": "={{ $json.output }}",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        1180,
        180
      ],
      "id": "74bce596-ee71-4982-a58a-84388d4d4115",
      "name": "Slack",
      "webhookId": "f76a0e17-643e-4399-8cee-0f0be5fa21af",
      "credentials": {
        "slackOAuth2Api": {
          "id": "diJj3DsJ6mfYnxja",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "trigger": [
          "app_mention",
          "any_event"
        ],
        "watchWorkspace": true,
        "options": {}
      },
      "type": "n8n-nodes-base.slackTrigger",
      "typeVersion": 1,
      "position": [
        -1340,
        180
      ],
      "id": "bd9e729e-4d60-48ea-ba48-42d25f2a6d6e",
      "name": "Slack Trigger",
      "webhookId": "3febc220-7207-45e4-b21c-5a9cb3526280",
      "credentials": {
        "slackApi": {
          "id": "GhUVE8zWnVkhUdSG",
          "name": "Slack account 2"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api-gateway.staging.woba.com.br/api/bookings?start_date={{ $json.output.startDate }}&end_date={{ $json.output.endDate }}&allowFuture=true&status[]=0&status[]=1&status[]=2&status[]=3&status[]=4&status[]=5&appType=3&companies%5B%5D={{ $json.output.companyId }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "auth-token",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjc5MjE4LCJlbWFpbCI6InN0ZWZoYW55Lm9saXZlaXJhQHdvYmEuY29tLmJyIiwicm9sZSI6ImFkbWluLGFkbWluLWNvLGFkbWluLWN3IiwicGVybWlzc2lvbnMiOlsicmVhZC1idWRnZXQiLCJjcmVhdGUtYnVkZ2V0IiwicmVhZC1ib29raW5ncy1yZXZpZXciLCJyZWFkLWJvb2tpbmdzLWNpdGllcyIsInJlYWQtY29tcGFueS1ncm91cHMiLCJyZWFkLWJvb2tpbmdzIiwicmVhZC1jb21wYW5pZXMtcmVwb3J0cyIsInJlYWQtc3BhY2VzIiwicmVhZC11c2VycyIsInVwZGF0ZS11c2VycyIsImRlbGV0ZS11c2VycyIsInJlYWQtdXNlcnMtc3Vic2NyaWJlcnMiLCJjcmVhdGUtdXNlcnMtc3Vic2NyaWJlcnMiLCJkZWxldGUtdXNlcnMtc3Vic2NyaWJlcnMiLCJyZWFkLXByaXZhdGUtcm9vbXMiLCJyZWFkLWNvbnRyYWN0cyIsInJlYWQtcGFja2FnZXMiLCJpbXBvcnQtbWVtYmVycyIsInJlYWQtaW52b2ljZXMiLCJyZWFkLWJvb2tpbmdzLWZpbHRlcnMiLCJjcmVhdGUtY29tcGFueS1ncm91cCJdLCJjb21wYW55SWQiOjE4OSwiZ3JvdXBJZCI6bnVsbCwicHJvZHVjdHMiOltdLCJhY2Nlc3NHcm91cHMiOltdLCJpYXQiOjE3NDQ3MjM1NDMsImV4cCI6MTc0NDcyOTU0M30.KytjXpqaSw6wXQ0mlYb3_ELIENtOZkBJeXxI48PZw-k"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -180,
        -20
      ],
      "id": "e4cc5606-1abf-4bec-aa7f-31f61ee9938e",
      "name": "Request Bookings"
    },
    {
      "parameters": {
        "jsCode": "const bookings = $input.first().json.bookings;\n\nconst groups = $input.first().json._embedded?.company_groups || [];\n\nconst pacotes = $input.first().json.packages || [];\n\nconsole.log($input.first().json._embedded)\n\nconsole.log(groups);\n\n\nif (!bookings || bookings.length === 0) {\n  return [{ json: { markdown: '# ‚ùå Nenhuma reserva encontrada.' } }];\n}\n\n// Mapas auxiliares\nconst porCidade = {};\nconst porEspaco = {};\nconst porGrupo = {};\nconst porUsuario = {};\nlet totalCreditos = 0;\nlet totalGasto = 0;\n\n// Map de ID de grupo ‚Üí nome\nconst mapGrupos = {};\ngroups.forEach(g => {\n  const ginfo = g.company_group;\n  mapGrupos[ginfo.id] = {\n    name: ginfo.name || 'Grupo sem nome',\n    total_members: g.total_members || 0\n  };\n});\n\n// Processar bookings\nbookings.forEach(booking => {\n  const cidade = booking.spaces?.cityname || 'Desconhecida';\n  const espaco = booking.spaces?.name || 'Espa√ßo desconhecido';\n  const user = booking.users;\n  const grupoId = booking.group_id;\n  const grupo = mapGrupos[grupoId];\n\n  totalCreditos += booking.credits || 0;\n  totalGasto += booking.spentAmmount || 0;\n\n  // Cidades\n  porCidade[cidade] = (porCidade[cidade] || 0) + 1;\n\n  // Espa√ßos\n  porEspaco[espaco] = porEspaco[espaco] || {\n    count: 0,\n    cm: booking.spaces?.cm_name,\n    bairro: booking.spaces?.neighborhood,\n    cidade\n  };\n  porEspaco[espaco].count++;\n\n  // Grupos\n  if (grupo) {\n    porGrupo[grupo.name] = porGrupo[grupo.name] || { count: 0, members: grupo.total_members };\n    porGrupo[grupo.name].count++;\n  }\n\n  // Usu√°rios\n  if (user?.first_name) {\n    const nomeCompleto = `${user.first_name} ${user.last_name || ''}`.trim();\n    porUsuario[nomeCompleto] = porUsuario[nomeCompleto] || {\n      email: user.email || '',\n      totalCreditos: 0\n    };\n    porUsuario[nomeCompleto].totalCreditos += booking.credits || 0;\n  }\n});\n\n// Top 5 usu√°rios\nconst topUsuarios = Object.entries(porUsuario)\n  .sort((a, b) => b[1].totalCreditos - a[1].totalCreditos)\n  .slice(0, 5);\n\n// Montagem do markdown\nlet markdown = `# üìä Relat√≥rio Anal√≠tico - Empresa ${bookings[0].companies?.id} -  ${bookings[0].companies?.name || 'Empresa Desconhecida'}\\n\\n`;\n\nmarkdown += `## üóìÔ∏è Per√≠odo: ${bookings[0].booking_date?.split('T')[0] || 'Indefinido'} at√© ${bookings.at(-1).booking_date?.split('T')[0] || 'Indefinido'}\\n\\n`;\n\nmarkdown += `### üî¢ Resumo Geral\\n`;\nmarkdown += `- Total de reservas: ${bookings.length}\\n`;\nmarkdown += `- Cr√©ditos consumidos: ${totalCreditos}\\n`;\nmarkdown += `- Valor gasto estimado: R$ ${(totalGasto / 100).toFixed(2)}\\n`;\nmarkdown += `- Cidades atendidas: ${Object.keys(porCidade).length}\\n`;\nmarkdown += `- Grupos identificados: ${Object.keys(porGrupo).length}\\n\\n`;\n\nmarkdown += `---\\n## üèôÔ∏è Reservas por Cidade:\\n`;\nfor (const [cidade, total] of Object.entries(porCidade)) {\n  markdown += `- **${cidade}**: ${total} reservas\\n`;\n}\n\nmarkdown += `\\n## üßë‚Äçü§ù‚Äçüßë Reservas por Grupo:\\n`;\nfor (const [grupo, data] of Object.entries(porGrupo)) {\n  markdown += `- **${grupo}**: ${data.count} reservas (${data.members} membros)\\n`;\n}\n\nmarkdown += `\\n## üë• Top 5 Usu√°rios por Cr√©ditos Consumidos:\\n`;\ntopUsuarios.forEach(([nome, data], i) => {\n  markdown += `${i + 1}. **${nome}** (${data.email}) ‚Äì ${data.totalCreditos} cr√©ditos\\n`;\n});\n\nmarkdown += `\\n## üè¢ Espa√ßos Utilizados:\\n`;\nfor (const [espaco, data] of Object.entries(porEspaco)) {\n  markdown += `- **${espaco}** (${data.cidade}, ${data.bairro}) ‚Äì ${data.count} reservas`;\n  if (data.cm) markdown += ` ‚Äî CM: ${data.cm}`;\n  markdown += '\\n';\n}\n\nmarkdown += `\\n---\\n## üìù Detalhamento das Reservas:\\n`;\nbookings.forEach((b, i) => {\n  const nomeUsuario = b.users?.first_name ? `${b.users.first_name} ${b.users.last_name || ''}` : 'Usu√°rio desconhecido';\n  const grupoNome = mapGrupos[b.group_id]?.name || 'Sem grupo';\n  const espaco = b.spaces?.name || 'Espa√ßo n√£o identificado';\n  const cidade = b.spaces?.cityname || 'Cidade n√£o informada';\n  const data = b.booking_date?.split('T')[0] || 'Data n√£o informada';\n  const horario = b.booking_detail || '';\n  const tipo = b.meetingRooms ? 'Reuni√£o' : b.privateRooms ? 'Exclusivo' : 'Outro';\n  const checkin = b.checkIn ? '‚úÖ' : '‚ùå';\n\n  markdown += `### Reserva #${b.id}\\n`;\n  markdown += `- Data: ${data} ${horario}\\n`;\n  markdown += `- Espa√ßo: ${espaco} (${cidade})\\n`;\n  markdown += `- Tipo: ${tipo}\\n`;\n  markdown += `- Usu√°rio: ${nomeUsuario} (${b.users?.email || 'sem email'})\\n`;\n  markdown += `- Grupo: ${grupoNome}\\n`;\n  markdown += `- Cr√©ditos: ${b.credits || 0}\\n`;\n  markdown += `- Gasto estimado: R$ ${(b.spentAmmount / 100).toFixed(2)}\\n`;\n  markdown += `- Check-in: ${checkin}\\n\\n`;\n});\n\nmarkdown += `## üéØ Informa√ß√µes do Pacote Contratado\\n\\n`;\n\nfor (const pacote of pacotes) {\n  const ciclo = pacote.activeCycle || {};\n  const produtos = pacote.products?.join(', ') || '-';\n  const bloqueados = pacote.blockedProducts?.length ? pacote.blockedProducts.join(', ') : '_nenhum_';\n  const consumido = ciclo.creditAmountConsumed || 0;\n  const total = ciclo.creditAmountTotal || 0;\n  const disponivel = ciclo.availableCredits || 0;\n  const excedentes = ciclo.exceededCredits || 0;\n\n  markdown += `### Pacote #${pacote.id} (${pacote.duration})\\n`;\n  markdown += `- Vig√™ncia: ${new Date(pacote.startDate).toLocaleDateString('pt-BR')} at√© ${new Date(pacote.endDate).toLocaleDateString('pt-BR')}\\n`;\n  markdown += `- Produtos dispon√≠veis: **${produtos}**\\n`;\n  markdown += `- Produtos bloqueados: **${bloqueados}**\\n`;\n  if (total > 0) {\n    markdown += `- Cr√©ditos totais: ${total}\\n`;\n    markdown += `- Cr√©ditos consumidos: ${consumido}\\n`;\n    markdown += `- Cr√©ditos dispon√≠veis: ${disponivel}\\n`;\n    markdown += `- Pre√ßo unit√°rio: R$ ${(ciclo.creditUnitPrice || 0).toFixed(2)}\\n`;\n    markdown += `- Pre√ßo de cr√©dito excedente: R$ ${(ciclo.creditExceededPrice || 0).toFixed(2)}\\n`;\n    markdown += `- Porcentagem consumida: ${(ciclo.consumeInPercentage || 0).toFixed(2)}%\\n\\n`;\n  } else {\n    markdown += `- Cr√©ditos excedentes utilizados: ${excedentes}\\n`;\n    markdown += `- Pre√ßo de cr√©dito excedente: R$ ${(ciclo.creditExceededPrice || 0).toFixed(2)}\\n`;\n    markdown += `- Cr√©ditos dispon√≠veis: ${disponivel}\\n\\n`;\n  }\n}\n\nmarkdown += `---\\n_Gerado automaticamente por WAi Facilities em ${new Date().toLocaleString('pt-BR')}_`;\n\n\n\nreturn [{ json: { markdown } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        340,
        180
      ],
      "id": "0b407452-5912-4789-aed4-020eb4b60c31",
      "name": "Code"
    },
    {
      "parameters": {
        "url": "=https://api-gateway.staging.woba.com.br/api/v0/companies/{{ $json.output.companyId }}/groups?fl=stats-members&limit=2000",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "auth-token",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjc5MjE4LCJlbWFpbCI6InN0ZWZoYW55Lm9saXZlaXJhQHdvYmEuY29tLmJyIiwicm9sZSI6ImFkbWluLGFkbWluLWNvLGFkbWluLWN3IiwicGVybWlzc2lvbnMiOlsicmVhZC1idWRnZXQiLCJjcmVhdGUtYnVkZ2V0IiwicmVhZC1ib29raW5ncy1yZXZpZXciLCJyZWFkLWJvb2tpbmdzLWNpdGllcyIsInJlYWQtY29tcGFueS1ncm91cHMiLCJyZWFkLWJvb2tpbmdzIiwicmVhZC1jb21wYW5pZXMtcmVwb3J0cyIsInJlYWQtc3BhY2VzIiwicmVhZC11c2VycyIsInVwZGF0ZS11c2VycyIsImRlbGV0ZS11c2VycyIsInJlYWQtdXNlcnMtc3Vic2NyaWJlcnMiLCJjcmVhdGUtdXNlcnMtc3Vic2NyaWJlcnMiLCJkZWxldGUtdXNlcnMtc3Vic2NyaWJlcnMiLCJyZWFkLXByaXZhdGUtcm9vbXMiLCJyZWFkLWNvbnRyYWN0cyIsInJlYWQtcGFja2FnZXMiLCJpbXBvcnQtbWVtYmVycyIsInJlYWQtaW52b2ljZXMiLCJyZWFkLWJvb2tpbmdzLWZpbHRlcnMiLCJjcmVhdGUtY29tcGFueS1ncm91cCJdLCJjb21wYW55SWQiOjE4OSwiZ3JvdXBJZCI6bnVsbCwicHJvZHVjdHMiOltdLCJhY2Nlc3NHcm91cHMiOltdLCJpYXQiOjE3NDQ3MjM1NDMsImV4cCI6MTc0NDcyOTU0M30.KytjXpqaSw6wXQ0mlYb3_ELIENtOZkBJeXxI48PZw-k"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -180,
        180
      ],
      "id": "34d4dcaf-9977-4be3-bfb2-2c5f28e284f7",
      "name": "Request Groups"
    },
    {
      "parameters": {
        "url": "=https://api-gateway.staging.woba.com.br/companies/{{ $json.output.companyId }}/packages/consumption",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjc5MjE4LCJlbWFpbCI6InN0ZWZoYW55Lm9saXZlaXJhQHdvYmEuY29tLmJyIiwicm9sZSI6ImFkbWluLGFkbWluLWNvLGFkbWluLWN3IiwicGVybWlzc2lvbnMiOlsicmVhZC1idWRnZXQiLCJjcmVhdGUtYnVkZ2V0IiwicmVhZC1ib29raW5ncy1yZXZpZXciLCJyZWFkLWJvb2tpbmdzLWNpdGllcyIsInJlYWQtY29tcGFueS1ncm91cHMiLCJyZWFkLWJvb2tpbmdzIiwicmVhZC1jb21wYW5pZXMtcmVwb3J0cyIsInJlYWQtc3BhY2VzIiwicmVhZC11c2VycyIsInVwZGF0ZS11c2VycyIsImRlbGV0ZS11c2VycyIsInJlYWQtdXNlcnMtc3Vic2NyaWJlcnMiLCJjcmVhdGUtdXNlcnMtc3Vic2NyaWJlcnMiLCJkZWxldGUtdXNlcnMtc3Vic2NyaWJlcnMiLCJyZWFkLXByaXZhdGUtcm9vbXMiLCJyZWFkLWNvbnRyYWN0cyIsInJlYWQtcGFja2FnZXMiLCJpbXBvcnQtbWVtYmVycyIsInJlYWQtaW52b2ljZXMiLCJyZWFkLWJvb2tpbmdzLWZpbHRlcnMiLCJjcmVhdGUtY29tcGFueS1ncm91cCJdLCJjb21wYW55SWQiOjE4OSwiZ3JvdXBJZCI6bnVsbCwicHJvZHVjdHMiOltdLCJhY2Nlc3NHcm91cHMiOltdLCJpYXQiOjE3NDQ3MjM1NDMsImV4cCI6MTc0NDcyOTU0M30.KytjXpqaSw6wXQ0mlYb3_ELIENtOZkBJeXxI48PZw-k"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -180,
        380
      ],
      "id": "1aae3215-a13e-4c8d-b763-5f688fe6f869",
      "name": "Request Packages"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "numberInputs": 3,
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        160,
        180
      ],
      "id": "3a19e947-7e6b-4dd2-877f-2a7d9a7419ec",
      "name": "Merge1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Hoje √© {{ $now }}\n\nPreciso que voc√™ me ajude a extrair corretamente 2 informa√ß√µes a partir do input do us√°rio o id da empresa e o per√≠odo consultado.\n\nCaso o usu√°rio n√£o forne√ßa as informa√ß√µes relacionadas a esses dados, retorne uma mensagem informando que voc√™ precisa saber qual √© a liga e o per√≠odo.\n\nEssa informa√ß√£o deve ser retornada assim:\ncompanyId: [id extra√≠do]\nstartDate: [data inicial no formato YYYY-MM-DD]\nendDate: [data final no formato YYYY-MM-DD]\n\n{{ $json.text }}"
        }
      },
      "id": "7158aa5f-832c-47c4-ba51-37f1cdedd4d6",
      "name": "Analista de Dados1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -1160,
        180
      ],
      "alwaysOutputData": true,
      "executeOnce": false,
      "retryOnFail": false,
      "notesInFlow": false
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"companyId\": \"189\",\n\t\"startDate\": \"YYYY-MM-DD\",\n    \"endDate\": \"YYYY-MM-DD\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -1000,
        400
      ],
      "id": "e4b874fd-ca5c-4c24-8e6d-8f5b12edab64",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1160,
        400
      ],
      "id": "e2f4174e-29c6-4b2c-a2ce-5e3968f9fad1",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "UFd2WIrurvCwSOE0",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "195f66f0-840d-42e0-b8c3-44e1661de4f6",
              "leftValue": "={{ $json.output.companyId }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "19bf20e8-603b-4582-a890-6db029f9e65c",
              "leftValue": "={{ $json.output.startDate }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "cb5b0c4c-dfbe-49b1-a23a-976c674d365a",
              "leftValue": "={{ $json.output.endDate }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -780,
        180
      ],
      "id": "d5236f70-65e0-4008-8996-c023f885ecae",
      "name": "If"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "={{ $('Slack Trigger').item.json.channel }}",
          "mode": "id"
        },
        "text": "=Preciso que voc√™ infome o id da empresa/liga e o per√≠odo que deseja consultar",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        -620,
        460
      ],
      "id": "ccf43980-6485-4d17-a7fe-1ea26928d807",
      "name": "Slack1",
      "webhookId": "f76a0e17-643e-4399-8cee-0f0be5fa21af",
      "credentials": {
        "slackApi": {
          "id": "GhUVE8zWnVkhUdSG",
          "name": "Slack account 2"
        }
      }
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "={{ $('Slack Trigger').item.json.channel }}",
          "mode": "id"
        },
        "text": "=Aguarde enquanto estou analisando as informa√ß√µes...",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        560,
        180
      ],
      "id": "e5891e3e-8d9f-4a68-80dd-d406d70bfcd4",
      "name": "Slack2",
      "webhookId": "f76a0e17-643e-4399-8cee-0f0be5fa21af",
      "credentials": {
        "slackApi": {
          "id": "GhUVE8zWnVkhUdSG",
          "name": "Slack account 2"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Analista de Dados",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Analista de Dados": {
      "main": [
        [
          {
            "node": "Slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Analista de Dados",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Slack Trigger": {
      "main": [
        [
          {
            "node": "Analista de Dados1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack": {
      "main": [
        []
      ]
    },
    "Request Bookings": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Request Groups": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Request Packages": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Slack2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analista de Dados1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Analista de Dados1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Analista de Dados1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Request Bookings",
            "type": "main",
            "index": 0
          },
          {
            "node": "Request Groups",
            "type": "main",
            "index": 0
          },
          {
            "node": "Request Packages",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Slack1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack2": {
      "main": [
        [
          {
            "node": "Analista de Dados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "7eeea4d0-a70b-4004-9b7b-39e17b14ce64",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b1dd7d5a248f52852a54c187dc8b5f2508350d00b2bf8019f80ca5f0a6737f0c"
  },
  "id": "Gv9U5HBnpFjM3sSZ",
  "tags": []
}